
package game;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import javax.swing.table.DefaultTableModel;

/**
 * HardHighScoreTable class represents a JFrame to display hard level high scores
 * It retrieves data from the Data class, sorts it, and displays it in a table
 * 
 * @author kareena.sen
 * @author Simran Kullar (Added changes to the MediumHighScoreTable constructor -- called saveHighScoresCSV method)
 */
public class HardHighScoreTable extends javax.swing.JFrame {    
    
    private Player currentPlayer;
    /**
     * Creates a new instance of HardHighScoreTable.
     */
    public HardHighScoreTable(Player currentPlayer) {
        initComponents(); // Initialize GUI components
        getHardData(); // Retrieve hard level high scores data

        // Initialize players list for the leaderboard
        LinkedList<Player> playersList = new LinkedList<>();
        for (Player data : Data.dataList) {
            
            // Create new Player objects using the information retrieved from the dataList
            // The Player constructor is assumed to take the ID, pin, high scores array,
            // progress, and achievements array as parameters
            Player players = new Player(data.getId(), data.getPin(), data.getHighscore(), data.getProg(), data.getAchievement());
            // Add each new Player object to the playersList LinkedList
            playersList.add(players);
        }
    
        // Initialize the leaderboard with the players list
        Leaderboard leaderboard = new Leaderboard(playersList);
    
        // Save the high scores to a CSV file
        // saveHighScoresToCSV takes filename and level index as parameters
        leaderboard.saveHighScoresToCSV("highscoresHard.csv", 2);

        // Update the high score table in the UI
        updateHardHSTable();
         // Set player to specified player
         this.currentPlayer = currentPlayer;
    }
    
    private String[][] hardArray; // Array to store hard level high scores
    
    /**
     * Comparator method for sorting integers.
     * 
     * @param a First integer to compare
     * @param b Second integer to compare
     * @return -1 if a > b, 1 if a < b, 0 if a == b
     */
    public int compare(Integer a, Integer b) {
        if(a > b) {
            return -1;
        }
        else if(a < b) {
            return 1;
        }
        else {
            return 0;
        }
    }
    
    /**
     * Retrieves hard level high scores data from the Data class,
     * sorts it, and stores it in hardArray.
     */
    private void getHardData() {
        Map <String, Integer> hardScoresDict = new HashMap<>(); // Map to store hard level high scores
        LinkedHashMap <String, Integer> sortedHardScores = new LinkedHashMap(); // LinkedHashMap to preserve insertion order
        ArrayList <Integer> placeHolderList = new ArrayList<>(); // ArrayList to temporarily hold high scores
        // Iterate through Data data list
        for(int i = 0; i < Data.dataList.size(); i++) {
            hardScoresDict.put(Data.dataList.get(i).getId(), Data.dataList.get(i).getHighscore()[2]); // Populate hardScoresDict with student ID and high score
        }
        // Add high scores to placeHolderList for sorting
        for(Map.Entry<String, Integer> entry : hardScoresDict.entrySet()){
            placeHolderList.add(entry.getValue());
        }
        // Sort high scores in ascending order
        Collections.sort(placeHolderList, Collections.reverseOrder());
        // Populate sortedHardScores with sorted high scores
        for(int num : placeHolderList){
            for(Map.Entry<String, Integer> entry : hardScoresDict.entrySet()){
                if(entry.getValue().equals(num)){
                    sortedHardScores.put(entry.getKey(), num);
                }
            }
        }
        // Initialize hardArray with dimensions for table display
        hardArray = new String [2][sortedHardScores.size()];
        Set<String> keys = sortedHardScores.keySet();
        int j = 0;
        // Populate hardArray with sorted data
        for (String key : keys){
            hardArray[0][j] = key; // Student ID
            hardArray[1][j] = String.valueOf(sortedHardScores.get(key)); // High score
            j++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jHardModeHighScoreTable = new javax.swing.JTable();
        jEasyModeButton = new javax.swing.JButton();
        jMedModeButton = new javax.swing.JButton();
        jHardModeButton = new javax.swing.JButton();
        jHardModeHighScoreTableLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        main = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jHardModeHighScoreTableMenu = new javax.swing.JMenuBar();
        jHardModeHighScoreTableMenuLabel = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        jPanel1.setBackground(new java.awt.Color(204, 175, 246));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 600));

        jHardModeHighScoreTable.setBackground(new java.awt.Color(255, 255, 229));
        jHardModeHighScoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"user1", "user1_score"},
                {"user2", "user2_score"},
                {"user3", "user3_score"},
                {null, null}
            },
            new String [] {
                "User", "Top Highscores"
            }
        ));
        jScrollPane1.setViewportView(jHardModeHighScoreTable);

        jEasyModeButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jEasyModeButton.setForeground(new java.awt.Color(102, 0, 204));
        jEasyModeButton.setText("Easy");
        jEasyModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEasyModeButtonActionPerformed(evt);
            }
        });

        jMedModeButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jMedModeButton.setForeground(new java.awt.Color(102, 0, 204));
        jMedModeButton.setText("Medium");
        jMedModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMedModeButtonActionPerformed(evt);
            }
        });

        jHardModeButton.setBackground(new java.awt.Color(255, 255, 204));
        jHardModeButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jHardModeButton.setForeground(new java.awt.Color(102, 0, 204));
        jHardModeButton.setText("Hard");

        jHardModeHighScoreTableLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 20)); // NOI18N
        jHardModeHighScoreTableLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jHardModeHighScoreTableLabel.setText("Hard Mode High Score Table");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crown.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crown.png"))); // NOI18N
        jLabel2.setText("jLabel1");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crown.png"))); // NOI18N
        jLabel4.setText("jLabel1");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crown.png"))); // NOI18N
        jLabel5.setText("jLabel1");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crown.png"))); // NOI18N
        jLabel6.setText("jLabel1");

        main.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        main.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainMouseClicked(evt);
            }
        });

        jLabel7.setText("Back to Menu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(199, 199, 199)
                                .addComponent(jHardModeHighScoreTableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(251, 414, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(197, 197, 197)
                        .addComponent(jEasyModeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jMedModeButton)
                        .addGap(27, 27, 27)
                        .addComponent(jHardModeButton)
                        .addGap(22, 22, 22))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jHardModeButton)
                                    .addComponent(jMedModeButton)
                                    .addComponent(jEasyModeButton)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel1)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jHardModeHighScoreTableLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jLabel6)
                        .addGap(31, 31, 31)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(27, 27, 27)
                        .addComponent(main))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)))
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        jHardModeHighScoreTableMenuLabel.setText("Capital Chain - Hard Mode High Scores Table");
        jHardModeHighScoreTableMenu.add(jHardModeHighScoreTableMenuLabel);

        setJMenuBar(jHardModeHighScoreTableMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Easy mode high score
     * @param evt 
     */
    private void jEasyModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEasyModeButtonActionPerformed
       EasyHighScoreTable easyLead = new EasyHighScoreTable(currentPlayer);
        easyLead.setVisible(true);
        dispose();
    }//GEN-LAST:event_jEasyModeButtonActionPerformed

    /**
     * Displays normal mode high score
     * @param evt 
     */
    private void jMedModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMedModeButtonActionPerformed
      MediumHighScoreTable medLead = new MediumHighScoreTable(currentPlayer);
       medLead.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMedModeButtonActionPerformed

    /**
     * Returns to main menu
     * @param evt 
     */
    private void mainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMouseClicked
        Menu menu = new Menu(currentPlayer);
        menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_mainMouseClicked

    /**
    * Updates the table displaying hard mode high scores with new data.
    */
    private void updateHardHSTable() {
    // Create a new DefaultTableModel to hold the table data
        DefaultTableModel model = new DefaultTableModel();
    
    // Add columns to the model
        model.addColumn("User"); // Column for user ID
        model.addColumn("Top Highscores"); // Column for top high scores
    
    // Add data from hardArray to the model
        for (int i = 0; i < hardArray[0].length; i++) {
            model.addRow(new Object[]{hardArray[0][i], hardArray[1][i]}); // Add a row with user ID and high score
        }
    
    // Set the new model to the jHardModeHighScoreTable, updating the displayed data
        jHardModeHighScoreTable.setModel(model);
    }
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jEasyModeButton;
    private javax.swing.JButton jHardModeButton;
    private javax.swing.JTable jHardModeHighScoreTable;
    private javax.swing.JLabel jHardModeHighScoreTableLabel;
    private javax.swing.JMenuBar jHardModeHighScoreTableMenu;
    private javax.swing.JMenu jHardModeHighScoreTableMenuLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton jMedModeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel main;
    // End of variables declaration//GEN-END:variables
}
